<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tony Wang]]></title>
  <link href="http://hutaow.github.io/atom.xml" rel="self"/>
  <link href="http://hutaow.github.io/"/>
  <updated>2010-04-13T23:11:05+08:00</updated>
  <id>http://hutaow.github.io/</id>
  <author>
    <name><![CDATA[Wang Tao]]></name>
    <email><![CDATA[hutaow (at) hotmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TP-WR703n安装OpenWRT记录]]></title>
    <link href="http://hutaow.github.io/blog/2013/09/06/install-openwrt/"/>
    <updated>2013-09-06T23:16:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2013/09/06/install-openwrt</id>
    <content type="html"><![CDATA[<h3>1 安装OpenWRT</h3>

<h4>1.1 下载并刷新固件</h4>

<p>如果以前没刷过OpenWRT，需要升级factory固件，<a href="http://downloads.openwrt.org/snapshots/trunk/ar71xx/openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin" title="openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin">点击这里下载</a>。</p>

<p>如果之前已经安装过了OpenWRT，则直接更新sysupgrade固件即可，<a href="http://downloads.openwrt.org/snapshots/trunk/ar71xx/openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-sysupgrade.bin" title="openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-sysupgrade.bin">点击这里下载</a>。</p>

<p>注意升级的时候要将原配置删除，避免配置文件互相影响，固件刷新完成后，路由器会自动重启。</p>

<h4>1.2 登陆路由器</h4>

<p>OpenWRT主线固件的无线信号是默认关闭的，这个时候需要找跟网线将电脑和路由器连接上，然后将电脑的IP地址设置为静态的&#8221;192.168.1.100&#8221;，然后用Telnet访问&#8221;192.168.1.1&#8221;，正确的情况下，会看到如下界面：
<img class="center" src="http://hutaow.github.io/images/articles/201309/install_openwrt_01_first_login.png" title="First Login" ></p>

<h4>1.3 打开无线信号</h4>

<p>编辑&#8221;/etc/config/wireless&#8221;文件，将&#8221;option disabled 1&#8221;这一行注掉，或者直接删除。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config wifi-device radio0
</span><span class='line'>    option type     mac80211
</span><span class='line'>    option channel  11
</span><span class='line'>    option hwmode   11ng
</span><span class='line'>    option path     'platform/ar933x_wmac'
</span><span class='line'>    option htmode   HT20
</span><span class='line'>    list ht_capab   SHORT-GI-20
</span><span class='line'>    list ht_capab   SHORT-GI-40
</span><span class='line'>    list ht_capab   RX-STBC1
</span><span class='line'>    list ht_capab   DSSS_CCK-40
</span><span class='line'>    # REMOVE THIS LINE TO ENABLE WIFI:
</span><span class='line'>    # option disabled 1
</span><span class='line'>
</span><span class='line'>config wifi-iface
</span><span class='line'>    option device   radio0
</span><span class='line'>    option network  lan
</span><span class='line'>    option mode     ap
</span><span class='line'>    option ssid     OpenWrt
</span><span class='line'>    option encryption none</span></code></pre></td></tr></table></div></figure>


<h4>1.4 外网接入配置</h4>

<p>编辑&#8221;/etc/config/network&#8221;文件，将原&#8221;lan&#8221;区段中的&#8221;ifname&#8221;注掉，新增&#8221;wan&#8221;段，如果是用宽带拨号上网，则配置成下面的样子（其中USERNAME和PASSWORD分别是拨号的用户名和密码）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config interface 'loopback'
</span><span class='line'>  option ifname 'lo'
</span><span class='line'>  option proto 'static'
</span><span class='line'>  option ipaddr '127.0.0.1'
</span><span class='line'>  option netmask '255.0.0.0'
</span><span class='line'>
</span><span class='line'>config globals 'globals'
</span><span class='line'>  option ula_prefix 'fd4f:26fb:9d78::/48'
</span><span class='line'>
</span><span class='line'>config interface 'lan'
</span><span class='line'>  # option ifname 'eth0'
</span><span class='line'>  option type 'bridge'
</span><span class='line'>  option proto 'static'
</span><span class='line'>  option ipaddr '192.168.1.1'
</span><span class='line'>  option netmask '255.255.255.0'
</span><span class='line'>  option ip6assign '60'
</span><span class='line'>
</span><span class='line'>config interface 'wan'
</span><span class='line'>  option ifname 'eth0'
</span><span class='line'>  option proto 'pppoe'
</span><span class='line'>  option username 'USERNAME'
</span><span class='line'>  option password 'PASSWORD'</span></code></pre></td></tr></table></div></figure>


<p>如果不需要拨号，直接通过其它路由器连接，则将&#8221;wan&#8221;区段配置成下面的样子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config interface 'wan'
</span><span class='line'>  option ifname 'eth0'
</span><span class='line'>  option proto 'dhcp'</span></code></pre></td></tr></table></div></figure>


<h4>1.5 重启路由器，完成OpenWRT的安装</h4>

<p>执行reboot命令重启路由器，将外网线连上，重启后搜索无线信号，就可以看到&#8221;OpenWRT&#8221;的信号了，连接上去，不出意外的话，这个时候电脑已经可以上网了。</p>

<h3>2 将OpenWRT扩展至U盘</h3>

<h4>2.1 安装基本软件</h4>

<p>再次用Telnet访问&#8221;192.168.1.1&#8221;，执行下面的命令，将挂载U盘相关的基本软件安装上。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>opkg update
</span><span class='line'>opkg install block-mount kmod-fs-ext4 kmod-usb-ohci kmod-usb-storage e2fsprogs</span></code></pre></td></tr></table></div></figure>


<h4>2.2 准备挂载U盘</h4>

<p>将U盘插上，执行&#8221;block info&#8221;命令，看下U盘是否已被识别，如下图，其中中sda1、sda2、sda5为U盘分区：
<img class="center" src="http://hutaow.github.io/images/articles/201309/install_openwrt_02_block_info.png" title="Block Info" ></p>

<h4>2.3 拷贝系统文件</h4>

<p>执行如下命令，将路由器ROM中的系统文件全部拷贝到U盘中：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mount /dev/sda1 /mnt 
</span><span class='line'>mkdir /tmp/vroot 
</span><span class='line'>mount --bind / /tmp/vroot 
</span><span class='line'>cp -a /tmp/vroot/* /mnt 
</span><span class='line'>sync 
</span><span class='line'>umount /tmp/vroot</span></code></pre></td></tr></table></div></figure>


<h4>2.4 设置交换空间（可选）</h4>

<p>U盘在分区时可以预留一个交换分区，防止路由器内存不足，这里预留的交换分区是sda5，执行下面的命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>swapon /dev/sda5</span></code></pre></td></tr></table></div></figure>


<h4>2.5 保存挂载信息</h4>

<p>将当前挂载状态写入fstab文件中：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>block detect &gt; /etc/config/fstab</span></code></pre></td></tr></table></div></figure>


<p>然后修改&#8221;/etc/config/fstab&#8221;文件，将sda1的挂载点设置为&#8221;/&ldquo;，并将&#8221;option enabled&#8221;置1，配置类似下面的样子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config global
</span><span class='line'>  option anon_swap '0'
</span><span class='line'>  option anon_mount '0'
</span><span class='line'>  option auto_swap '1'
</span><span class='line'>  option auto_mount '1'
</span><span class='line'>  option delay_root '5'
</span><span class='line'>  option check_fs '0'
</span><span class='line'>
</span><span class='line'>config mount
</span><span class='line'>  option target '/'
</span><span class='line'>  option uuid '413b964c-9c9c-4af4-8966-daf04ee53414'
</span><span class='line'>  option enabled '1'
</span><span class='line'>  option fstype 'ext4'
</span><span class='line'>
</span><span class='line'>config mount
</span><span class='line'>  option target '/home'
</span><span class='line'>  option uuid 'e7052ed0-b883-4375-9f31-5648ea8f2948'
</span><span class='line'>  option enabled '1'
</span><span class='line'>  option fstype 'ext4'
</span><span class='line'>
</span><span class='line'>config swap
</span><span class='line'>  option uuid '58713d02-e9de-4c23-a56b-a5ea3d3dfcf0'
</span><span class='line'>  option enabled '1'</span></code></pre></td></tr></table></div></figure>


<p>如果U盘只有一个分区，会只看到一个sda1(&ldquo;/&rdquo;)，其它诸如sda2(&ldquo;/home&rdquo;)、sda5(&ldquo;swap&rdquo;)需要额外分区才能看到。</p>

<h4>2.6 重启路由器，完成OpenWRT的扩展</h4>

<p>重启路由器，再次&#8221;df -h&#8221;一下，可以看到路由器的空间已经扩展成功了。
<img class="center" src="http://hutaow.github.io/images/articles/201309/install_openwrt_03_df.png" title="DF Info" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[字符串中单词逆序的实现]]></title>
    <link href="http://hutaow.github.io/blog/2010/04/13/reverse-order-of-words-in-a-string/"/>
    <updated>2010-04-13T19:35:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2010/04/13/reverse-order-of-words-in-a-string</id>
    <content type="html"><![CDATA[<p>在Java中可以用压栈/弹栈的方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">import</span><span class="err"> </span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Stack</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span><span class="err"> </span><span class="n">class</span><span class="err"> </span><span class="n">StackTest</span><span class="err"> </span><span class="o">{</span>
</span><span class='line'><span class="err"> </span><span class="kd">public</span><span class="err"> </span><span class="kd">static</span><span class="err"> </span><span class="kt">void</span><span class="err"> </span><span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="err"> </span><span class="n">argv</span><span class="o">[])</span><span class="err"> </span><span class="o">{</span>
</span><span class='line'><span class="err">  </span><span class="n">Stack</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="err"> </span><span class="n">stack</span><span class="err"> </span><span class="o">=</span><span class="err"> </span><span class="k">new</span><span class="err"> </span><span class="n">Stack</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'><span class="err">  </span><span class="k">for</span><span class="o">(</span><span class="n">String</span><span class="err"> </span><span class="n">s</span><span class="err"> </span><span class="o">:</span><span class="err"> </span><span class="s">&quot;I have a round peach&quot;</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">))</span><span class="err"> </span><span class="o">{</span>
</span><span class='line'><span class="err">   </span><span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">s</span><span class="o">);</span><span class="c1">//按字符串原顺序压栈</span>
</span><span class='line'>
</span><span class='line'><span class="err">  </span><span class="o">}</span>
</span><span class='line'><span class="err">  </span><span class="k">while</span><span class="o">(!</span><span class="n">stack</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span><span class="err"> </span><span class="o">{</span>
</span><span class='line'><span class="err">   </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">()</span><span class="err"> </span><span class="o">+</span><span class="err"> </span><span class="s">&quot; &quot;</span><span class="o">);</span><span class="c1">//弹栈并输出</span>
</span><span class='line'>
</span><span class='line'><span class="err">  </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行后系统将输出 &ldquo;peach round a have I &#8220;。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正斜杠与反斜杠的分析]]></title>
    <link href="http://hutaow.github.io/blog/2010/01/30/analysis-of-the-forward-slash-and-backslash/"/>
    <updated>2010-01-30T00:29:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2010/01/30/analysis-of-the-forward-slash-and-backslash</id>
    <content type="html"><![CDATA[<p>　　正斜杠(左斜杠)，符号是&#8221;/&ldquo;；反斜杠(右斜杠)，符号是&rdquo;\&ldquo;。</p>

<p>　　在Unix/Linux中，路径的分隔采用正斜杠&#8221;/&ldquo;，比如&rdquo;/home/hutaow&#8221;；而在Windows中，路径分隔采用反斜杠&#8221;\&ldquo;，比如&#8221;C:\Windows\System&#8221;。</p>

<p>　　有时我们会看到这样的路径写法，&#8221;C:&#92;\Windows&#92;\System&#8221;，也就是用两个反斜杠来分隔路径，这种写法在网络应用或编程中经常看到，事实上，上面这个路径可以用&#8221;C:/Windows/System&#8221;来代替，不会出错。但是如果写成了&#8221;C:\Windows\System&#8221;，那就可能会出现各种奇怪的错误了。</p>

<p>　　至于上述问题出现的原因，要从字符串解析这方面来分析。</p>

<p>　　学过编程的人都应该知道，在C里面，输出字符串时，如果想输出一个换行，那就要加上&#8217;\n&#8217;这个标志，类似的，输出一个TAB，就加上&#8217;\t&#8217;，也就是说，反斜杠(&ldquo;\&rdquo;)这个符号会把跟在它后面的字符结合起来转义成其它字符。根据这个原理，如果想输出双引号(&lsquo;&ldquo;&rsquo;)，就需要输入&#8217;\&rdquo;&lsquo;，这样才会将包含了双引号的字符串正确的写入内存中。那么如果想输入一个反斜杠呢？很简单，只要敲&rsquo;&#92;\&lsquo;就可以了。</p>

<p>　　看到这里或许有些人已经看出眉目了，如果&#8221;C:\Windows\System&#8221;这个路径字符串交给C编译器编译，实际写入内存的字符串并没有包含反斜杠&#8221;\&ldquo;，甚至紧跟在反斜杠后面的字母也一起被转义成了其它的字符，再次调用的话势必会出问题。</p>

<p>　　字符串解析不仅仅局限于C编译器，Java编译器、一些配置文件的解析、Web服务器等等，都会遇到对字符串进行解析的这个问题，由于传统的Windows采用的是单个斜杠的路径分隔形式，导致在对文件路径进行解析的时候可能发生不必要的错误，所以就出现了用双反斜杠&#8221;&#92;\&ldquo;分隔路径的形式。不管解析引擎是否将反斜杠解析成转义字符，最终在内存中得到的都是&rdquo;\&ldquo;，结果也就不会出问题了。</p>

<p>　　由此也可以看出Windows或者说DOS在设计初期考虑不够周全，为了和Unix一些特征区别开来，将Unix中的正斜杠&#8221;/&ldquo;分隔路径方式改变成了反斜杠&rdquo;\&ldquo;。这样改变导致的一个问题就是在早期DOS命令行中，正常的文件名是不能包含空格的，如果包含了空格，会导致输入这样的文件名时，命令解析无法将其和参数区分开。例如，想要进入&#8221;hutaow yuan&#8221;这个目录（在此先忽略8.3命名规则），直接输入&#8221;cd hutaow yuan&#8221;，命令行会将其解析为进入&#8221;hutaow&#8221;目录，而后面的&#8221;yuan&#8221;做参数，这显然不是所期望的。</p>

<p>　　而在Unix中，文件名如果包含空格，可以直接在空格前加上反斜杠&#8221;\&ldquo;进行转义，从而很好的和命令参数区别出来（参数之间一般使用空格分隔）。还是上面的例子，在Unix中，只要输入&#8221;cd hutaow\ yuan&rdquo;(在yuan前面的空格前加上&#8221;\&ldquo;)，命令行会正确的辨认出&#8221;hutaow yuan&#8221;并进入这个目录。</p>

<p>　　当然，现在Windows的后续版本已经使用其它方法（比如文件名用双引号括住）解决了空格问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTC Diamond 两个有意思的功能]]></title>
    <link href="http://hutaow.github.io/blog/2010/01/14/interesting-features-in-htc-diamond/"/>
    <updated>2010-01-14T20:28:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2010/01/14/interesting-features-in-htc-diamond</id>
    <content type="html"><![CDATA[<p>这两天一直折腾 HTC Diamond，发现了两个很有意思的功能：</p>

<ol>
<li><p>Diamond的手写笔不像其它手机那样有卡槽卡住，而是像有磁铁一样把笔&#8221;吸&#8221;进去，实际上功能远不止这个。在Diamond关闭屏幕时，拔出手写笔，屏幕会自动亮起，还有比这更神奇的，在打电话时，如果拔出手写笔，Diamond会打开便签，并且便签已经包含了通话对象、时间等信息，方便记录；</p></li>
<li><p>Diamond的重力感应不仅用在玩游戏上，来电话时，只要把手机面向下放，就可以关闭铃声（静音）。这避免了在开会等类似场合突然遇到来电手忙脚乱情况的发生。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xmarks(原Foxmarks)被墙之后更新的方法]]></title>
    <link href="http://hutaow.github.io/blog/2010/01/12/slove-the-problem-that-xmarks-was-block-by-gfw/"/>
    <updated>2010-01-12T22:53:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2010/01/12/slove-the-problem-that-xmarks-was-block-by-gfw</id>
    <content type="html"><![CDATA[<p>最近重新装上Xmarks书签同步之后，发现不能用了，还以为设置出了问题，上官网发现已经上不去了，被GFW屏蔽了。于是上网查找解决办法，总结如下：</p>

<h4>1. 手动添加域名解析的地址，即向“C:\Windows\System32\Drivers\etc\hosts&#8221;文件中添加如下内容：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Xmarks
</span><span class='line'>64.147.188.86 www.xmarks.com
</span><span class='line'>64.147.188.92 api.xmarks.com
</span><span class='line'>64.147.188.89 login.xmarks.com
</span><span class='line'>64.147.188.87 sync.xmarks.com
</span><span class='line'>64.147.188.86 static.xmarks.com
</span><span class='line'>64.147.188.86 download.xmarks.com
</span><span class='line'>64.147.188.86 my.xmarks.com</span></code></pre></td></tr></table></div></figure>


<h4>2. 设置Xmarks连接及传输数据过程中加密，即在&#8221;Connection Security&#8221;中选择&#8221;Encrypt All&#8221;。</h4>

<p>以上两步即可解决Xmarks不能同步的问题。</p>

<h4>分析原因：</h4>

<ol>
<li><p>第一步操作的原因在于GFW是根据URL而不是IP进行过滤的，所以在请求解析诸如&#8221;xmarks.com&#8221;等类似的域名时，返回结果被GFW拦截，所以要手动添加xmarks.com一系列服务器的域名IP；</p></li>
<li><p>第二步操作让Xmarks在同步时对数据进行加密，GFW是无法认出加密的数据的，也就无法进一步拦截了。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[标记ATL控件为安全控件]]></title>
    <link href="http://hutaow.github.io/blog/2009/05/02/mark-atl-control-as-a-safe-control/"/>
    <updated>2009-05-02T14:02:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2009/05/02/mark-atl-control-as-a-safe-control</id>
    <content type="html"><![CDATA[<p>用ATL开发网页控件时，IE总会出现“该控件不是安全的”之类的提示，去掉这个提示的方法就是使用 IObjectSafety 将其标记为可安全初始化的控件。</p>

<p>实现方法如下：</p>

<p>首先在需要将 IObjectSafetyImpl 添加到该控件的派生类中，然后在映射列表中添加 IObjectSafety，具体添加的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">CHutaow</span> <span class="o">:</span><span class="err"> </span>
</span><span class='line'>    <span class="c1">// 添加到控件的派生类列表中</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">IObjectSafetyImpl</span><span class="o">&lt;</span><span class="n">CHutaow</span><span class="p">,</span> <span class="n">INTERFACESAFE_FOR_UNTRUSTED_CALLER</span><span class="o">|</span><span class="n">INTERFACESAFE_FOR_UNTRUSTED_DATA</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">BEGIN_COM_MAP</span><span class="p">(</span><span class="n">CHutaow</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">COM_INTERFACE_ENTRY</span><span class="p">(</span><span class="n">IObjectSafety</span><span class="p">)</span><span class="err"> </span><span class="c1">//创建IObjectSafety的映射</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">END_COM_MAP</span><span class="p">()</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>PS: 如果出现&#8221;&lsquo;IObjectSafetyImpl&rsquo; : base class undefined&#8221;的错误，则需要添加&#8221;atlctl.h&#8221;头文件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL语句实现某一字符串的替换]]></title>
    <link href="http://hutaow.github.io/blog/2009/04/02/sql-statements-batch-replace-a-string/"/>
    <updated>2009-04-02T10:55:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2009/04/02/sql-statements-batch-replace-a-string</id>
    <content type="html"><![CDATA[<p>使用update+replace语句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="k">update</span> <span class="n">table_name</span> <span class="kt">set</span> <span class="n">column_name</span> <span class="o">=</span> <span class="k">replace</span><span class="p">(</span><span class="n">column_name</span><span class="p">,</span><span class="err">’</span><span class="n">hutaow_original_string</span><span class="err">’</span><span class="p">,</span><span class="err">&#39;</span><span class="n">hutaow_new_string</span><span class="err">’</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，table_name是表的名字，column_name是要替换数据的列的名字，hutaow_original_string是待替换的原始字符串，hutaow_new_string是新字符串，MySQL下验证成功。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java中十六进制字符串与字节数组的相互转换]]></title>
    <link href="http://hutaow.github.io/blog/2008/08/14/convert-between-byte-array-and-hex-string/"/>
    <updated>2008-08-14T19:05:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2008/08/14/convert-between-byte-array-and-hex-string</id>
    <content type="html"><![CDATA[<p>原理很简单，直接贴源代码吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @author wangtao</span>
</span><span class='line'><span class="cm"> * @version 2008.8.14</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span><span class="err"> </span><span class="kd">class</span> <span class="nc">Util</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span><span class="err"> </span><span class="kd">static</span><span class="err"> </span><span class="kt">char</span><span class="o">[]</span> <span class="n">hexDigits</span> <span class="o">=</span><span class="err"> </span>
</span><span class='line'><span class="err">   </span> <span class="o">{</span><span class="sc">&#39;0&#39;</span><span class="o">,</span> <span class="sc">&#39;1&#39;</span><span class="o">,</span> <span class="sc">&#39;2&#39;</span><span class="o">,</span> <span class="sc">&#39;3&#39;</span><span class="o">,</span> <span class="sc">&#39;4&#39;</span><span class="o">,</span> <span class="sc">&#39;5&#39;</span><span class="o">,</span> <span class="sc">&#39;6&#39;</span><span class="o">,</span> <span class="sc">&#39;7&#39;</span><span class="o">,</span> <span class="sc">&#39;8&#39;</span><span class="o">,</span> <span class="sc">&#39;9&#39;</span><span class="o">,</span> <span class="sc">&#39;A&#39;</span><span class="o">,</span> <span class="sc">&#39;B&#39;</span><span class="o">,</span> <span class="sc">&#39;C&#39;</span><span class="o">,</span> <span class="sc">&#39;D&#39;</span><span class="o">,</span> <span class="sc">&#39;E&#39;</span><span class="o">,</span> <span class="sc">&#39;F&#39;</span><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="err">   </span> <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * @notes 字节数组转化为字符串</span>
</span><span class='line'><span class="cm">     * @param bytes</span>
</span><span class='line'><span class="cm">     * @return String</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span><span class="err"> </span><span class="kd">static</span><span class="err"> </span><span class="n">String</span> <span class="n">toHexString</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">   </span> <span class="err">   </span> <span class="kt">char</span><span class="o">[]</span> <span class="n">chars</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">bytes</span><span class="o">.</span><span class="na">length</span> <span class="o">*</span> <span class="mi">2</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'><span class="err">   </span> <span class="err">   </span> <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">bytes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'><span class="err">   </span> <span class="err">   </span> <span class="err">   </span> <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">bytes</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'><span class="err">   </span> <span class="err">   </span> <span class="err">   </span> <span class="n">chars</span><span class="o">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">Util</span><span class="o">.</span><span class="na">hexDigits</span><span class="o">[(</span><span class="n">b</span> <span class="o">&amp;</span> <span class="mh">0xF0</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="o">];</span>
</span><span class='line'><span class="err">   </span> <span class="err">   </span> <span class="err">   </span> <span class="n">chars</span><span class="o">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">Util</span><span class="o">.</span><span class="na">hexDigits</span><span class="o">[</span><span class="n">b</span> <span class="o">&amp;</span> <span class="mh">0x0F</span><span class="o">];</span>
</span><span class='line'><span class="err">   </span> <span class="err">   </span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">   </span> <span class="err">   </span> <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">chars</span><span class="o">);</span>
</span><span class='line'><span class="err">   </span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">   </span> <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * @notes 字符串转化为字节数组</span>
</span><span class='line'><span class="cm">     * @param str</span>
</span><span class='line'><span class="cm">     * @return byte[]</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kd">static</span><span class="err"> </span><span class="kt">byte</span><span class="o">[]</span> <span class="n">toByteArray</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span><span class="err"> </span>
</span><span class='line'><span class="err">   </span> <span class="err">   </span> <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'><span class="err">   </span> <span class="err">   </span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">length</span><span class="o">];</span>
</span><span class='line'><span class="err">   </span> <span class="err">   </span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">source</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="err">   </span> <span class="err">   </span> <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">bytes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">   </span> <span class="err">   </span> <span class="err">   </span> <span class="kt">byte</span> <span class="n">bh</span> <span class="o">=</span> <span class="n">Byte</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="s">&quot;0x&quot;</span> <span class="o">+</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="k">new</span> <span class="kt">byte</span><span class="o">[]{</span><span class="n">source</span><span class="o">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">2</span><span class="o">]})).</span><span class="na">byteValue</span><span class="o">();</span>
</span><span class='line'><span class="err">   </span> <span class="err">   </span> <span class="err">   </span> <span class="n">bh</span> <span class="o">=</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)(</span><span class="n">bh</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="o">);</span>
</span><span class='line'><span class="err">   </span> <span class="err">   </span> <span class="err">   </span> <span class="kt">byte</span> <span class="n">bl</span> <span class="o">=</span> <span class="n">Byte</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="s">&quot;0x&quot;</span> <span class="o">+</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="k">new</span> <span class="kt">byte</span><span class="o">[]{</span><span class="n">source</span><span class="o">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]})).</span><span class="na">byteValue</span><span class="o">();</span>
</span><span class='line'><span class="err">   </span> <span class="err">   </span> <span class="err">   </span> <span class="n">bytes</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)(</span><span class="n">bh</span> <span class="o">^</span> <span class="n">bl</span><span class="o">);</span>
</span><span class='line'><span class="err">   </span> <span class="err">   </span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">   </span> <span class="err">   </span> <span class="k">return</span> <span class="n">bytes</span><span class="o">;</span>
</span><span class='line'><span class="err">   </span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[终端下使用代理的方法]]></title>
    <link href="http://hutaow.github.io/blog/2008/08/10/config-proxy-in-linux-terminal/"/>
    <updated>2008-08-10T15:12:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2008/08/10/config-proxy-in-linux-terminal</id>
    <content type="html"><![CDATA[<p>很长时间都不知道怎么设置，今天突然发现，设置四个环境变量就行了，&#8221;HTTP_PROXY&#8221;、&#8221;http_proxy&#8221;和&#8221;FTP_PROXY&#8221;、&#8221;ftp_proxy&#8221;，在&#8221;~/.bash_profile&#8221;中添加以下几行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export HTTP_PROXY=http://username:password@proxy.server:8080
</span><span class='line'>export FTP_PROXY=http://username:password@proxy.server:8080
</span><span class='line'>export http_proxy=http://username:password@proxy.server:8080
</span><span class='line'>export ftp_proxy=http://username:password@proxy.server:8080</span></code></pre></td></tr></table></div></figure>


<p>其中，username和password是用户名和密码，用在需要验证的代理服务器上；proxy.server是代理服务器的地址，后面的8080是端口号。</p>

<p>修改保存后重启终端或在执行&#8221;source ~/.bash_proxy&#8221;生效。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fedora 9 无法启动KDE的解决办法]]></title>
    <link href="http://hutaow.github.io/blog/2008/07/29/slove-the-problem-that-kde-can-not-start-in-fedora-9/"/>
    <updated>2008-07-29T11:34:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2008/07/29/slove-the-problem-that-kde-can-not-start-in-fedora-9</id>
    <content type="html"><![CDATA[<p>今天突然想再尝试一下KDE的环境，而且传说中的KDE4出了那么久，还一直没有用过，于是兴致勃勃的安装上了KDE的桌面环境。Logout->KDE，结果却报出个错误，说&#8221;Could not start kstartupconfig4. Check your installation&#8221;，无语，难道是我少装了什么东西？</p>

<p>按照它说的检查，结果没问题啊，kstartupconfig4已经安装好了，于是又上网查，google出好多解决办法，不过基本上都是用&#8221;chown&#8221;改变&#8221;~/.kde&#8221;目录的所有者，哦？检查……&#8221;~/.kde&#8221;这个目录竟然是root的，原来是权限的问题。</p>

<p>输入&#8221;chown -R owner ~/.kde&#8221;，为了保险，再加个&#8221;chgrp -R group ~/.kde&#8221;，这里面的&#8221;owner&#8221;和&#8221;group&#8221;分别是当前的用户名和用户所在的组名。</p>

<p>之后重新进入KDE，一切正常！</p>

<p>PS：新的KDE环境确实做的不错，桌面右上角的widget加上suse的主菜单非常赞</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下将.cue/.bin转换为.iso的方法]]></title>
    <link href="http://hutaow.github.io/blog/2008/07/19/convert-cue-and-bin-to-iso-format-in-linux/"/>
    <updated>2008-07-19T17:20:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2008/07/19/convert-cue-and-bin-to-iso-format-in-linux</id>
    <content type="html"><![CDATA[<p>从学校的FTP上下了个Windows 2000 Advance Server光盘镜像，打算装在虚拟机里，结果发现下下来的镜像是.cue/.bin格式的，VirtualBox还用不了，于是跑google上搜了一大堆linux里转换.iso格式的软件，发现一个叫&#8221;bchunk&#8221;的小软件非常好用，而且小的可以，才几十K，很不错。</p>

<p>在终端里输入如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bchunk e-w2sp4ru1as.bin e-w2sp4ru1as.cue e-w2sp4ru1as.iso</span></code></pre></td></tr></table></div></figure>


<p>其中，e-w2sp4ru1as.e-w2sp4ru1as.cue是原来的镜像名，e-w2sp4ru1as.iso是转换后想要保存的文件名。</p>

<p>等一小会儿，就像下面这幅图一样，会有一个进度条，进度到100%后转换就完成了。
<img class="center" src="http://hutaow.github.io/images/articles/200807/convert_cue_and_bin_to_iso_format_in_linux.png" title="Convert CUE and BIN to ISO format" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新版VirtualBox在Fedora下不能启动虚拟机的解决办法]]></title>
    <link href="http://hutaow.github.io/blog/2008/07/18/slove-the-problem-of-new-version-virtualbox-can-not-start-virtual-machine-in-fedora/"/>
    <updated>2008-07-18T20:48:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2008/07/18/slove-the-problem-of-new-version-virtualbox-can-not-start-virtual-machine-in-fedora</id>
    <content type="html"><![CDATA[<p>前一段时间突然发现VirtualBox被Sun收购了，改名成&#8221;Sun xVM VirtualBox&#8221;，于是兴致勃勃的安上了最新版，结果发现虚拟机启动不了了，提示错误：</p>

<pre><code>VirtualBox kernel driver not installed. The vboxdrv kernel module was either not loaded or /dev/vboxdrv was not created for some reason. 
Re-setup the kernel module by executing ‘/etc/init.d/vboxdrv setup’ as root.
</code></pre>

<p>于是按照提示在终端里执行&#8221;sudo /etc/init.d/vboxdrv setup&#8221;时，却又提示VirtualBox的内核模块无法编译，查看日志发现是没有安装内核源代码。</p>

<p>于是执行&#8221;sudo yum install kernel-devel&#8221;，等待系统自动下载并安装。注意这里我用的Linux是Fedora，如果是其它发行版可以执行相应的安装命令，唯一相同的是软件包&#8221;kernel-devel&#8221;名字不变。</p>

<p>安装完成后，再次执行&#8221;sudo /etc/init.d/vboxdrv setup&#8221;，搞定！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二维条码终于有了突破!]]></title>
    <link href="http://hutaow.github.io/blog/2008/04/02/mark-breakthrough-for-dimensional-bar-code-decoder/"/>
    <updated>2008-04-02T12:21:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2008/04/02/mark-breakthrough-for-dimensional-bar-code-decoder</id>
    <content type="html"><![CDATA[<p>自己改写了几个类，这几天不停的测试测试测试，今天终于成功解码，不过因为字符编码还没彻底弄好，所以解出来的还都是乱码，不过英文已经可以解析出来了，值得纪念的一天!</p>

<p><img class="center" src="http://hutaow.github.io/images/articles/200804/mark_breakthrough_for_dimensional_bar_code_decoder.png" title="Breakthrough for Dimensional Bar Code Decoder" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[因字符编码导致的编译不通过]]></title>
    <link href="http://hutaow.github.io/blog/2008/03/20/compilation-failed-due-to-character-encoding/"/>
    <updated>2008-03-20T15:08:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2008/03/20/compilation-failed-due-to-character-encoding</id>
    <content type="html"><![CDATA[<p>从网上下了QR标准的二维码库，打算直接调用里面的类来实现。在Fedora下Java编译通过，只是提示了一下使用了过时的方法。但我把代码复制到Windows里时，却编译不同过，出现了近1k个错误，代码完全一样，只是操作系统不同就会出问题？</p>

<p>回想在Windows里用UltraEdit打开时，提示文件不是&#8221;DOS Format&#8221;，会不会和文字编码有关？Linux用的是UTF-8的编码，而Windows用的是GBK的编码，难道字符编码必须要和本地相同才能编译通过么？试一下，于是把代码用UltraEdit转换成了GBK编码，再次编译，终于正常通过。</p>

<p>看来有时编译不通过不一定是语句问题，连文件的编码也有可能出问题，如果在不同系统中出现类似上面一个正常一个错误的情况，可以考虑看是不是因为文件的编码和系统默认的编码有差异而引起的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fedora禁止自动挂载分区的方法]]></title>
    <link href="http://hutaow.github.io/blog/2008/02/17/disable-automatically-mount-partitions-under-fedora/"/>
    <updated>2008-02-17T21:28:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2008/02/17/disable-automatically-mount-partitions-under-fedora</id>
    <content type="html"><![CDATA[<p>Fedora在启动时会自动把系统中的其它分区挂载，为了对自动挂载的分区进行一定的限制，就要改变相应的策略，这一策略存放在&#8221;/usr/share/hal/fdi/policy/10osvendor/20-storage-methods.fdi&#8221;文件中。</p>

<p>找到以下提示行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!-- Here follow volumes we specifically want to ignore - it is the --&gt;
</span><span class='line'>&lt;!-- responsibility of software higher in the stack (e.g. gnome-vfs) --&gt;
</span><span class='line'>&lt;!-- amd mount programs (e.g. Mount() on HAL) to respect volume.ignore --&gt;
</span><span class='line'>&lt;merge key="volume.ignore" type="bool"&gt;false&lt;/merge&gt;</span></code></pre></td></tr></table></div></figure>


<p>按照说明在提示之后添加对磁盘挂载的策略即可，比如我自己的硬盘就是</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;match key="volume.fstype" string="vfat"&gt;
</span><span class='line'>  &lt;match key="volume.label" string="DATA"&gt;
</span><span class='line'>    &lt;merge key="volume.ignore" type="bool"&gt;true&lt;/merge&gt;
</span><span class='line'>  &lt;/match&gt;
</span><span class='line'>  &lt;match key="volume.label" string="MULTI"&gt;
</span><span class='line'>    &lt;merge key="volume.ignore" type="bool"&gt;true&lt;/merge&gt;
</span><span class='line'>  &lt;/match&gt;
</span><span class='line'>  &lt;match key="volume.label" string="BACKUP"&gt;
</span><span class='line'>    &lt;merge key="volume.ignore" type="bool"&gt;true&lt;/merge&gt;
</span><span class='line'>  &lt;/match&gt;
</span><span class='line'>&lt;/match&gt;</span></code></pre></td></tr></table></div></figure>


<p>其中&#8221;volume.fstype&#8221;后面的值就是匹配的文件系统，&#8221;volume.label&#8221;后面的值是匹配的卷标，&#8221;volume.ignore&#8221;中的参数是&#8221;true&#8221;，意思是忽略被匹配的分区。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决安装ntfs-3g时遇到的问题]]></title>
    <link href="http://hutaow.github.io/blog/2008/02/15/slove-the-problem-on-install-ntfs-3g/"/>
    <updated>2008-02-15T20:16:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2008/02/15/slove-the-problem-on-install-ntfs-3g</id>
    <content type="html"><![CDATA[<p>今天安装了CentOS，结果发现好多软件源里都没有，看来又要手动安装了，为了挂载ntfs分区，跑去<a href="http://www.ntfs-3g.org">http://www.ntfs-3g.org</a>下载ntfs-3g，安装好后，试图执行&#8221;mount -t ntfs-3g /dev/hdc5 /media/wdata&#8221;，结果提示：</p>

<pre><code>FATAL: Module fuse not found.
fuse: device not found, try 'modprobe fuse' first
</code></pre>

<p>冷不丁的冒出这么个错误提示，有点措手不及的感觉，于是按照提示执行&#8221;modprobe fuse&#8221;，结果又出来：</p>

<pre><code>FATAL: Module fuse not found.
</code></pre>

<p>没有fuse模块？用Google搜到了<a href="http://fuse.sourceforge.net">http://fuse.sourceforge.net</a>，看上面说明的意思是说fuse(Filesystem in Userspace)是个库，提供了API供用户开发文件系统，看样子通过它开发文件系统又会方便不少，最后只要连接到fuse库上就可以了。呵呵，不管怎么说先下载了安装再说，这些以后有时间再慢慢研究吧。下载后解压，执行下面的命令编译安装fuse：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./configure
</span><span class='line'>make
</span><span class='line'>make install</span></code></pre></td></tr></table></div></figure>


<p>装好后再次执行mount命令，完成！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android命令行下的编译和运行]]></title>
    <link href="http://hutaow.github.io/blog/2008/02/13/compile-android-project-in-command-line/"/>
    <updated>2008-02-13T15:51:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2008/02/13/compile-android-project-in-command-line</id>
    <content type="html"><![CDATA[<p>想学到东西还是要从命令行开始，真正学到之后再考虑用IDE。下面总结一下在命令行下android工程的创建、编译、运行和调试的方法。</p>

<h3>1 工程的创建</h3>

<p>在要存放工程的目录下用执行&#8221;activityCreator.py &mdash;out hutaow edu.bupt.hutaow.example&#8221; </p>

<p>说明如下：</p>

<ul>
<li>activityCreator.py，创建工程的脚本文件，linux里使用&#8221;activityCreator.py&#8221;，如果是windows，则应当换成&#8221;activityCreator.bat&#8221;</li>
<li>&mdash;out hutaow，其中hutaow是生成工程的输出目录，执行android工程的所有文件都会放在这个目录里</li>
<li>edu.bupt.hutaow.example，这个是包的名称以及类的名称，其中最后一个字段是生成的类的名称，edu.bupt.hutaow是example类所在的包</li>
</ul>


<p>命令执行后会在hutaow目录下生成工程的所有文件。</p>

<p>执行后终端输出如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package: edu.bupt.hutaow
</span><span class='line'>out_dir: hutaow
</span><span class='line'>activity_name: example
</span><span class='line'>Created directory hutaow/src/edu/bupt/hutaow
</span><span class='line'>Added file hutaow/src/edu/bupt/hutaow/example.java
</span><span class='line'>Created directory hutaow/bin
</span><span class='line'>Created directory hutaow/res/values
</span><span class='line'>Added file hutaow/res/values/strings.xml
</span><span class='line'>Created directory hutaow/res/layout
</span><span class='line'>Added file hutaow/res/layout/main.xml
</span><span class='line'>Added file hutaow/AndroidManifest.xml
</span><span class='line'>Added file hutaow/build.xml</span></code></pre></td></tr></table></div></figure>


<h3>2 工程的编译</h3>

<p>这里编译需要用到Ant，Ant是Apache出的用于编译Java工程文件的工具，Android是基于Java设计的，所以这里要用到它，Ant可以在<a href="http://ant.apache.org">http://ant.apache.org</a>下载的到，具体安装过程和Java、Android差不多，都是解压出来后设置环境变量，可以参考Linux中设置Java环境变量。</p>

<p>使用Ant编译直接在工程目录下执行简单的一条&#8221;ant&#8221;即可，不用任何参数，Ant会根据build.xml文件中的描述自动进行相关的语法检查、依赖分析等等一些工作，最终将编译好的文件输出在工程的bin目录下。</p>

<p>执行后终端输出如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Buildfile: build.xml
</span><span class='line'>
</span><span class='line'>dirs:
</span><span class='line'>    [mkdir] Created dir: /home/wangtao/Documents/android/hutaow/bin/classes
</span><span class='line'>
</span><span class='line'>resource-src:
</span><span class='line'>     [echo] Generating R.java...
</span><span class='line'>
</span><span class='line'>aidl:
</span><span class='line'>
</span><span class='line'>compile:
</span><span class='line'>    [javac] Compiling 2 source files to /home/wangtao/Documents/android/hutaow/bin/classes
</span><span class='line'>
</span><span class='line'>dex:
</span><span class='line'>
</span><span class='line'>package-res:
</span><span class='line'>
</span><span class='line'>package-res-no-assets:
</span><span class='line'>     [echo] Packaging resources...
</span><span class='line'>
</span><span class='line'>package-dex:
</span><span class='line'>     [echo] Packaging dex...
</span><span class='line'>
</span><span class='line'>package:
</span><span class='line'>
</span><span class='line'>BUILD SUCCESSFUL
</span><span class='line'>Total time: 6 seconds</span></code></pre></td></tr></table></div></figure>


<h3>3 程序的运行及调试</h3>

<p>这里要用到的工具是android的调试工具adb，由它来完成程序的安装工作。首先在命令行输入&#8221;emulator&#8221;启动android模拟器。</p>

<p>然后等模拟器完全启动好后，执行&#8221;adb install bin/example.apk&#8221;，即将example.apk安装到模拟器中。</p>

<p>最终在模拟器的&#8221;Applications&#8221;分类中找到&#8221;example&#8221;执行程序。</p>

<p>执行后终端输出如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* daemon not running. starting it now *
</span><span class='line'>33 KB/s (4170 bytes in 0.120s)</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux中改变网卡的速度]]></title>
    <link href="http://hutaow.github.io/blog/2008/02/11/change-the-spped-of-network-adapter-under-linux/"/>
    <updated>2008-02-11T18:28:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2008/02/11/change-the-spped-of-network-adapter-under-linux</id>
    <content type="html"><![CDATA[<p>今天又用到家里的那根20几米的超长网线了，因为太长了，之前windows里用它联网的时候要把网卡速度降到10Mbps才能用。如果自动配置的话会默认用100Mbps的速度连接，但这样的话就会时断时连很不稳定。</p>

<p>我在Linux里试图在Network里直接配置速度，但没有找到，上网google发现需要手动修改，用到的工具是mii-tool。</p>

<p>用管理员权限执行如下命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mii-tool -A 10baseT-FD eth0</span></code></pre></td></tr></table></div></figure>


<p>eth0是网卡的名称，&#8221;10baseT-FD&#8221;是网卡的工作模式，如果要改回100Mbps的话这里填&#8221;100baseTx-FD&#8221;；</p>

<p>FD指的是Full Duplex全双工，也可以是HD即Half Duplex半双工。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决MPlayer中文字幕显示问题]]></title>
    <link href="http://hutaow.github.io/blog/2008/02/02/slove-mplayer-chinese-subtitles-problems/"/>
    <updated>2008-02-02T21:44:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2008/02/02/slove-mplayer-chinese-subtitles-problems</id>
    <content type="html"><![CDATA[<p>MPlayer在播放电影时，中文字幕往往不能正确显示，自己简单分析了一下，之所以中文显示出乱码是由于字符的编码选择不正确造成的。</p>

<p>在MPlayer的设置里有两个地方要对字符编码进行设置，一个是对显示字幕的编码进行设置，另一个是对字体文件的编码设置。</p>

<p>对于字幕的编码，就是要显示中文、英文、法文还是其它文字；而对于字体的编码，则是需要根据提供的字体文件严格选择对应的编码。明白了以上两点，再进行设置就不难了。</p>

<p>具体的设置过程如下：</p>

<ol>
<li><p>首先选择字幕编码，在MPlayer的设置中选择&#8221;Subtitle &amp; OSD&#8221;选项卡，在&#8221;Encoding&#8221;选单中选择&#8221;Simplified Chinese charset (CP936)&ldquo;。</p></li>
<li><p>接下来是字体编码，先要选择一个中文字体，&#8221;Font&#8221;选项卡中，在&#8221;Font&#8221;一栏选择一个中文字体(个人建议将自己的字体放在~/.fonts目录下，然后再到这个目录中选择相应的字体)。字体选择好后，在&#8221;Encoding&#8221;选单中选择&#8221;Unicode&#8221;，因为unicode是国际通用的字符编码标准，一般的字体编码都是unicode，所以此处要选择&#8221;Unicode&#8221;而不是&#8221;CP936&#8221;。</p></li>
<li><p>确定保存后重新播放中文字幕就可以正常显示了。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rhythmbox播放MP3和WMA所需要的解码器]]></title>
    <link href="http://hutaow.github.io/blog/2008/02/02/rhythmbox-play-mp3-and-wma-format-decoder-required/"/>
    <updated>2008-02-02T08:45:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2008/02/02/rhythmbox-play-mp3-and-wma-format-decoder-required</id>
    <content type="html"><![CDATA[<ul>
<li>如果想支持mp3，需要gstreamer-plugins-bad和gstreamer-plugins-ugly</li>
<li>如果想支持wma，需要gstreamer-ffmpeg</li>
</ul>

]]></content>
  </entry>
  
</feed>
