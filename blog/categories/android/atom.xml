<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | 胡桃]]></title>
  <link href="http://hutaow.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://hutaow.github.io/"/>
  <updated>2013-09-23T00:23:20+08:00</updated>
  <id>http://hutaow.github.io/</id>
  <author>
    <name><![CDATA[Wang Tao]]></name>
    <email><![CDATA[hutaow@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[二维条码终于有了突破!]]></title>
    <link href="http://hutaow.github.io/blog/2008/04/02/mark-breakthrough-for-dimensional-bar-code-decoder/"/>
    <updated>2008-04-02T12:21:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2008/04/02/mark-breakthrough-for-dimensional-bar-code-decoder</id>
    <content type="html"><![CDATA[<p>自己改写了几个类，这几天不停的测试测试测试，今天终于成功解码，不过因为字符编码还没彻底弄好，所以解出来的还都是乱码，不过英文已经可以解析出来了，值得纪念的一天!</p>

<!-- more -->


<p><img class="center" src="/images/articles/200804/mark_breakthrough_for_dimensional_bar_code_decoder.png" title="Breakthrough for Dimensional Bar Code Decoder" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android命令行下的编译和运行]]></title>
    <link href="http://hutaow.github.io/blog/2008/02/13/compile-android-project-in-command-line/"/>
    <updated>2008-02-13T15:51:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2008/02/13/compile-android-project-in-command-line</id>
    <content type="html"><![CDATA[<p>想学到东西还是要从命令行开始，真正学到之后再考虑用IDE。下面总结一下在命令行下android工程的创建、编译、运行和调试的方法。</p>

<h3>1 工程的创建</h3>

<p>在要存放工程的目录下用执行"activityCreator.py &mdash;out hutaow edu.bupt.hutaow.example" </p>

<p>说明如下：</p>

<ul>
<li>activityCreator.py，创建工程的脚本文件，linux里使用"activityCreator.py"，如果是windows，则应当换成"activityCreator.bat"</li>
<li>&mdash;out hutaow，其中hutaow是生成工程的输出目录，执行android工程的所有文件都会放在这个目录里</li>
<li>edu.bupt.hutaow.example，这个是包的名称以及类的名称，其中最后一个字段是生成的类的名称，edu.bupt.hutaow是example类所在的包</li>
</ul>


<!-- more -->


<p>命令执行后会在hutaow目录下生成工程的所有文件。</p>

<p>执行后终端输出如下：</p>

<p><code>
package: edu.bupt.hutaow
out_dir: hutaow
activity_name: example
Created directory hutaow/src/edu/bupt/hutaow
Added file hutaow/src/edu/bupt/hutaow/example.java
Created directory hutaow/bin
Created directory hutaow/res/values
Added file hutaow/res/values/strings.xml
Created directory hutaow/res/layout
Added file hutaow/res/layout/main.xml
Added file hutaow/AndroidManifest.xml
Added file hutaow/build.xml
</code></p>

<h3>2 工程的编译</h3>

<p>这里编译需要用到Ant，Ant是Apache出的用于编译Java工程文件的工具，Android是基于Java设计的，所以这里要用到它，Ant可以在<a href="http://ant.apache.org">http://ant.apache.org</a>下载的到，具体安装过程和Java、Android差不多，都是解压出来后设置环境变量，可以参考Linux中设置Java环境变量。</p>

<p>使用Ant编译直接在工程目录下执行简单的一条"ant"即可，不用任何参数，Ant会根据build.xml文件中的描述自动进行相关的语法检查、依赖分析等等一些工作，最终将编译好的文件输出在工程的bin目录下。</p>

<p>执行后终端输出如下：</p>

<p>```
Buildfile: build.xml</p>

<p>dirs:
    [mkdir] Created dir: /home/wangtao/Documents/android/hutaow/bin/classes</p>

<p>resource-src:
     [echo] Generating R.java&hellip;</p>

<p>aidl:</p>

<p>compile:
    [javac] Compiling 2 source files to /home/wangtao/Documents/android/hutaow/bin/classes</p>

<p>dex:</p>

<p>package-res:</p>

<p>package-res-no-assets:
     [echo] Packaging resources&hellip;</p>

<p>package-dex:
     [echo] Packaging dex&hellip;</p>

<p>package:</p>

<p>BUILD SUCCESSFUL
Total time: 6 seconds
```</p>

<h3>3 程序的运行及调试</h3>

<p>这里要用到的工具是android的调试工具adb，由它来完成程序的安装工作。首先在命令行输入"emulator"启动android模拟器。</p>

<p>然后等模拟器完全启动好后，执行"adb install bin/example.apk"，即将example.apk安装到模拟器中。</p>

<p>最终在模拟器的"Applications"分类中找到"example"执行程序。</p>

<p>执行后终端输出如下：</p>

<p><code>
* daemon not running. starting it now *
33 KB/s (4170 bytes in 0.120s)
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Android做了一个计算器]]></title>
    <link href="http://hutaow.github.io/blog/2008/01/30/android-calculator/"/>
    <updated>2008-01-30T11:50:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2008/01/30/android-calculator</id>
    <content type="html"><![CDATA[<p>这两天一直在看xml，昨天简单的做了一个计算器，算是实地练习一下，熟悉一下Android的开发过程，不过有些小问题还没有顾及，还有就是界面可能稍显难看了一些。</p>

<p>运行时的截图：
<img class="center" src="/images/articles/200801/android_calculator.png" title="Android Calculator" ></p>

<!-- more -->


<p>源代码地址：<a href="https://github.com/hutaow/AndroidCalculator">点击这里</a></p>

<p>PS: 今天整理的时候发现一个问题，这个程序是我原来用Android SDK的m3版本生成编译的，现在SDK的最新版本是m5，结果在m5里竟然编译不通过。解决方法是可以重新创建一个项目，直接将源代码部分复制粘贴过去就可以了，新的项目仍然可以编译运行，我想应该是build.xml那个文件里的问题，版本、结构上google可能改了一些，不过不碍大事。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对Android布局的理解]]></title>
    <link href="http://hutaow.github.io/blog/2008/01/28/understanding-on-the-android-layout/"/>
    <updated>2008-01-28T20:13:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2008/01/28/understanding-on-the-android-layout</id>
    <content type="html"><![CDATA[<p>前一段时间一直在考试，现在放假了，有时间好好的看了一下Android的布局。</p>

<p>之前对于XML的布局方法一直看着不爽，感觉很乱的样子，但时间长了我渐渐发现，这种程序代码与界面布局完全分开的方法非常顺手，该布局的地方都到main.xml里去写，甚至界面中显示的字符串都可以集中到string.xml文件中，而主程序的".java"文件中则完全用于编写代码，思路非常清晰。</p>

<!-- more -->


<h3>1 首先按照程序的目录结构大致分析</h3>

<pre><code>res/layout/   这个目录存放的就是布局用的xml文件，一般默认为main.xml
res/values/   这个目录存放的是一堆常量的xml文件
res/drawable/ 存放的是一些图片什么的，当然图标也在这里
</code></pre>

<h3>2 下面主要对layout下的xml文件做个介绍，顺便也把布局的方法总结一下</h3>

<h4>2.1 文件的开头</h4>

<p><code>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
</code>
这是在说明xml版本及字符编码</p>

<h4>2.2 布局框架</h4>

<p><code>
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
  android:layout_width="wrap_content"
  android:layout_height="wrap_content"&gt;
&lt;/LinearLayout&gt;
</code>
其中开头的"LinearLayout"是布局的方式，可以有很多种，最常用的应该就是Linear了，其他的布局方法等下在后面总结。</p>

<p>接着android:layout_width(height)=&ldquo;wrap_content"是在设置这部分布局的宽高，也可以是绝对值，当然设置为绝对值时要标上单位。</p>

<h4>2.3 添加控件</h4>

<p>在"&lt;LinearLayout>&ldquo;和&rdquo;&lt;/LinearLayout>&ldquo;之间就可以添加控件了，比如要添加一个名字为btn的Button控件，并且Button上显示的文字是"Test!"，可以这样写：</p>

<p><code>
&lt;Button id="@+id/btn"
  android:text="Test!"
  android:layout_width="wrap_content"
  android:layout_height="wrap_content"
/&gt;
</code></p>

<p>开头id后面的就是控件名称，在用于添加事件Listener时会用到，而下几行的android:xxx就是设置控件的属性了，这些属性在Android的文档中都有，不需要特别去记，一般现查就可以了。</p>

<p><strong><em>有一点要说明的是，布局方法可以嵌套，有点像java中的Container，可以非常方便的把界面“堆”出来。</em></strong></p>

<p>布局方式的简单说明：
查了Android文档发现布局确实很多，只列出两个我自己认为较常用的：</p>

<ul>
<li>LinearLayout线性的布局方式，要么上下，要么左右的添加控件，很常用</li>
<li>GridView中文翻译过来是网格布局，控件按照顺序依次填到每个格子里就好了，出来的界面会很整齐</li>
</ul>


<p>其他的布局方式可以在需要时查文档，这里不再列出。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初学Android的一点问题]]></title>
    <link href="http://hutaow.github.io/blog/2008/01/11/android-beginner-question/"/>
    <updated>2008-01-11T11:33:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2008/01/11/android-beginner-question</id>
    <content type="html"><![CDATA[<p>前几天一直在看Android的文档，有些收获但同时还是有问题。</p>

<h4>1 问题：关于Android的Layout</h4>

<p>似乎和java有很大的不同，Android引入了XML，从google所给的例子来看，控件的布局方式都是写在XML文件里，而主程序中需要的只是add并且引用XML文件中的布局方式。</p>

<!-- more -->


<p>这种方法对我来说并不是很习惯，毕竟java用了那么长时间，在代码中直接setLayout感觉更舒服些。当然既然google采用了这种布局和代码分离的方式那就肯定有它的优点，看来还需要一点的时间来习惯这种布局方式。</p>

<h4>2 总结：我自己对Android几个模块的理解</h4>

<pre><code>Activity：类似java中的Applet或Frame，以我的理解，这个类提供了程序的最基本框架。
Intent Receiver：翻译过来是“目的接收器”，和java中的listener类似，用于处理事件。
Service：后台运行的服务，长贮内存中，个人认为这一块最可能出现安全问题。
Content Provider：主要用在数据存贮和交换，根据官方文档所说，不仅仅是存储数据，还可以是在不同程序、不同设备之间的数据交换。
</code></pre>
]]></content>
  </entry>
  
</feed>
