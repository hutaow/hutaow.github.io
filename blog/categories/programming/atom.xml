<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Tony Wang]]></title>
  <link href="http://hutaow.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://hutaow.github.io/"/>
  <updated>2009-05-02T21:16:02+08:00</updated>
  <id>http://hutaow.github.io/</id>
  <author>
    <name><![CDATA[Wang Tao]]></name>
    <email><![CDATA[hutaow (at) hotmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[标记ATL控件为安全控件]]></title>
    <link href="http://hutaow.github.io/blog/2009/05/02/mark-atl-control-as-a-safe-control/"/>
    <updated>2009-05-02T14:02:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2009/05/02/mark-atl-control-as-a-safe-control</id>
    <content type="html"><![CDATA[<p>用ATL开发网页控件时，IE总会出现“该控件不是安全的”之类的提示，去掉这个提示的方法就是使用 IObjectSafety 将其标记为可安全初始化的控件。</p>

<p>实现方法如下：</p>

<p>首先在需要将 IObjectSafetyImpl 添加到该控件的派生类中，然后在映射列表中添加 IObjectSafety，具体添加的代码如下：</p>

<p>``` c++
class CHutaow : </p>

<pre><code>// 添加到控件的派生类列表中
public IObjectSafetyImpl&lt;CHutaow, INTERFACESAFE_FOR_UNTRUSTED_CALLER|INTERFACESAFE_FOR_UNTRUSTED_DATA&gt;
...
{
    public:

    BEGIN_COM_MAP(CHutaow)

    COM_INTERFACE_ENTRY(IObjectSafety) //创建IObjectSafety的映射

    ...

    END_COM_MAP()
    ...
}
</code></pre>

<p>```</p>

<p>PS: 如果出现"&lsquo;IObjectSafetyImpl&rsquo; : base class undefined"的错误，则需要添加"atlctl.h"头文件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java中十六进制字符串与字节数组的相互转换]]></title>
    <link href="http://hutaow.github.io/blog/2008/08/14/convert-between-byte-array-and-hex-string/"/>
    <updated>2008-08-14T19:05:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2008/08/14/convert-between-byte-array-and-hex-string</id>
    <content type="html"><![CDATA[<p>原理很简单，直接贴源代码吧。</p>

<p>``` java
/<em><em>
 </em> @author wangtao
 </em> @version 2008.8.14
 */
public class Util {
    public static char[] hexDigits = 
    {&lsquo;0&rsquo;, &lsquo;1&rsquo;, &lsquo;2&rsquo;, &lsquo;3&rsquo;, &lsquo;4&rsquo;, &lsquo;5&rsquo;, &lsquo;6&rsquo;, &lsquo;7&rsquo;, &lsquo;8&rsquo;, &lsquo;9&rsquo;, &lsquo;A&rsquo;, &lsquo;B&rsquo;, &lsquo;C&rsquo;, &rsquo;D', &lsquo;E&rsquo;, &lsquo;F&rsquo;};</p>

<p>    /<em><em>
     </em> @notes 字节数组转化为字符串
     </em> @param bytes
     <em> @return String
     </em>/
    public static String toHexString(byte[] bytes) {
        char[] chars = new char[bytes.length * 2];</p>

<p>        for (int i = 0; i &lt; bytes.length; i++) {
            int b = bytes[i];
            chars[i * 2] = Util.hexDigits[(b &amp; 0xF0) >> 4];
            chars[i * 2 + 1] = Util.hexDigits[b &amp; 0x0F];
        }</p>

<p>        return new String(chars);
    }</p>

<p>    /<em><em>
     </em> @notes 字符串转化为字节数组
     </em> @param str
     <em> @return byte[]
     </em>/
    public static byte[] toByteArray(String str) { 
        int length = str.length() / 2;
        byte[] bytes = new byte[length];
        byte[] source = str.getBytes();</p>

<p>        for (int i = 0; i &lt; bytes.length; ++i) {
            byte bh = Byte.decode(&ldquo;0x&rdquo; + new String(new byte[]{source[i * 2]})).byteValue();
            bh = (byte)(bh &lt;&lt; 4);
            byte bl = Byte.decode(&ldquo;0x&rdquo; + new String(new byte[]{source[i * 2 + 1]})).byteValue();
            bytes[i] = (byte)(bh ^ bl);
        }</p>

<p>        return bytes;
    }
}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[因字符编码导致的编译不通过]]></title>
    <link href="http://hutaow.github.io/blog/2008/03/20/compilation-failed-due-to-character-encoding/"/>
    <updated>2008-03-20T15:08:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2008/03/20/compilation-failed-due-to-character-encoding</id>
    <content type="html"><![CDATA[<p>从网上下了QR标准的二维码库，打算直接调用里面的类来实现。在Fedora下Java编译通过，只是提示了一下使用了过时的方法。但我把代码复制到Windows里时，却编译不同过，出现了近1k个错误，代码完全一样，只是操作系统不同就会出问题？</p>

<p>回想在Windows里用UltraEdit打开时，提示文件不是"DOS Format"，会不会和文字编码有关？Linux用的是UTF-8的编码，而Windows用的是GBK的编码，难道字符编码必须要和本地相同才能编译通过么？试一下，于是把代码用UltraEdit转换成了GBK编码，再次编译，终于正常通过。</p>

<p>看来有时编译不通过不一定是语句问题，连文件的编码也有可能出问题，如果在不同系统中出现类似上面一个正常一个错误的情况，可以考虑看是不是因为文件的编码和系统默认的编码有差异而引起的。</p>
]]></content>
  </entry>
  
</feed>
