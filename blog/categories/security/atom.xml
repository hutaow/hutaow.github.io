<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Security | Tony Wang]]></title>
  <link href="http://hutaow.github.io/blog/categories/security/atom.xml" rel="self"/>
  <link href="http://hutaow.github.io/"/>
  <updated>2013-06-16T23:00:59+08:00</updated>
  <id>http://hutaow.github.io/</id>
  <author>
    <name><![CDATA[Wang Tao]]></name>
    <email><![CDATA[hutaow (at) hotmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Snort安装IDMEF插件]]></title>
    <link href="http://hutaow.github.io/blog/2010/04/21/install-idmef-plugin-for-snort/"/>
    <updated>2010-04-21T10:48:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2010/04/21/install-idmef-plugin-for-snort</id>
    <content type="html"><![CDATA[<p>Snort作为一款开源的入侵检测系统，可以与其它各种网络设备连接协同工作，其中IDMEF插件可以实现设备之间报警信息的共享，在安装该插件时，需要注意以下几个问题：</p>

<ol>
<li><p>IDMEF插件依赖于<a href="http://sourceforge.net/projects/libidmef">libidmef</a>、<a href="http://xmlsoft.org">libxml2</a>及<a href="http://www.ntp.org">libntp</a>库，所以在安装Snort之前，需要首先安装这三个库。</p></li>
<li><p>配置Snort时，需要加上"&mdash;enable-idmef"参数，如下所示：</p></li>
</ol>


<p><code>
./configure --enable-idmef
make
make install
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[入侵检测与响应系统的信息共享]]></title>
    <link href="http://hutaow.github.io/blog/2010/04/17/intrusion-dedection-and-response-system-for-information-sharing/"/>
    <updated>2010-04-17T21:25:00+08:00</updated>
    <id>http://hutaow.github.io/blog/2010/04/17/intrusion-dedection-and-response-system-for-information-sharing</id>
    <content type="html"><![CDATA[<h3>引言</h3>

<p>入侵检测系统(IDS)与其它系统(如防火墙)交互过程中，需要遵循一定的规范和协议，然而生产IDS的各个厂家的报警日志及数据格式均有所区别，所以在不同设备之间交互会遇到很多麻烦。早先知道的是CheckPoint提出的OPSec协议和天融信提出的TOPSec协议，凡是遵循这两个协议的网络安全设备均可与相应的IDS进行交互，协同防护网络安全。在2007年，IETF针对这种交互情况形成了四份相关文档，分为三个部分，分别是隧道轮廓(RFC3620 &ndash; The TUNNEL Profile)、入侵检测消息交换格式和要求(RFC4765 &ndash; IDMEF, RFC4766 &ndash; IDMER)、入侵检测交换协议(RFC4767 &ndash; IDXP)。</p>

<p>值得注意的是，IETF规定IDS对其它设备交互的方式采用XML格式存储和传输，和SOAP似乎有些相似，XML跨平台跨语言结构清晰等优点使它的应用范围越来越广，几乎达到了无处不用XML的程度。
　</p>

<h3>1 入侵检测消息交互过程</h3>

<h4>1.1 建立连接</h4>

<p>使用IDXP传输数据的入侵检测实体被称为IDXP对等体。对等体只能成对出现，这些对等体通过BEEP会话中的一个或多个BEEP信道进行数据传输。对等体可能是管理器或分析器。</p>

<p>在分析器和管理器之间很可能是多对多的关系。即一个分析器可以和多个管理器通信，同样，一个管理器也可以和多个分析器通信；在不同的管理器之间也可以是多对多的关系。所以，一个管理器可以通过多个中间管理器接收大量的来自分析器的报警信息。但是，各个分析器之间禁止建立IDXP连接，避免重复报警情况的发生。</p>

<p><strong>对等体"Alice"和"Bob"建立IDXP交换的过程</strong></p>

<p>IDXP对等体之间通过打开一个BEEP信道进行通信。在打开BEEP信道之前，需要首先建立BEEP会话，然后就安全特性等问题进行协商。BEEP安全轮廓协商成功后，再经互相确认应答，然后开始IDXP交换。</p>

<pre><code>Alice                                               Bob
  ------------------- 建立连接(1) --------------------&gt;
&lt;---------------------- 问候 ------------------------&gt;
&lt;------------------ 启动安全轮廓(2) ------------------&gt;
&lt;---------------------- 问候 ------------------------&gt;
&lt;------------------- 启动 IDXP(3) -------------------&gt;
</code></pre>

<p>交互过程:</p>

<ul>
<li>&ldquo;Alice"建立一个到'Bob'的连接, 并触发交换二者BEEP问候消息</li>
<li>两个实体协商BEEP安全轮廓</li>
<li>两个实体协商IDXP轮廓</li>
</ul>


<p><strong>对等体"Alice"和"Bob"通过代理服务器建立IDXP交换</strong></p>

<p>在一对IDXP对等体之间可以存在多个代理，这些代理可能是因为管理的需要。比如透过防火墙进行受限访问，或是将公司各部门分析器的数据转发到公司总管理器。</p>

<p>在使用代理转发数据时，会使用BEEP协调轮廓建立一个应用层的隧道。隧道轮廓(详细见"RFC3620 &ndash; The TUNNEL profile")即在此时发挥作用。在创建应用层隧道时，必须建立一个作为协调轮廓的隧道，并且该隧道轮廓需要进行SASL认证。隧道建立完成后，BEEP安全轮廓才可以提供IDXP协商时需要的各项安全特性。</p>

<pre><code>Alice              proxy1               proxy2               Bob
  ----- 建立连接 ----&gt;
&lt;------ 问候 -------&gt;
  ---- 启动隧道 -----&gt;
                      --- 建立连接(1) ----&gt;
                    &lt;------- 问候 -------&gt;
                      ----- 启动隧道 -----&gt;
                                           ----- 建立连接 -----&gt;
                                         &lt;------- 问候 -------&gt;
                                           ----- 启动隧道 -----&gt;
                                         &lt;---- &lt;确认&gt;(2) -----
                    &lt;------ &lt;确认&gt; ------
&lt;----- &lt;确认&gt; ------
&lt;--------------------------- 问候 ----------------------------&gt;
&lt;----------------------- 启动安全轮廓 -------------------------&gt;
&lt;--------------------------- 问候 ----------------------------&gt;
&lt;------------------------- 启动 IDXP -------------------------&gt;
</code></pre>

<p>交互过程:</p>

<ul>
<li>收到"Alice"启动隧道的消息后，"proxy1"并没有立即返回确认消息，而是先试图和"proxy"连接以建立隧道。同样的，"proxy2"也不会立即给"proxy1"返回确认消息</li>
<li>&ldquo;Bob"的确认信息首先到达"proxy2"并且与之启动隧道，然后确认消息会传递下去最终返回给"Alice"，最终"Alice"和"Bob"之间就成功建立了应用层的隧道</li>
</ul>


<h4>1.2 数据传输</h4>

<p>在一对入侵检测实体通过BEEP会话进行通信时，会使用IDXP轮廓打开一个或多个BEEP信道。如果需要，可以用IDXP轮廓建立更多的BEEP会话，以提供额外的信道。但是在多数情况下，还是应该在已有的BEEP会话中添加新的信道，尽量避免用新建BEEP会话的方式添加信道。</p>

<p>在每条信道中，对等体都是以客户端/服务器形式进行通信。客户端和服务器的角色扮演决定于建立BEEP会话的发起者和监听者。即发起者为客户端，监听者为服务器。</p>

<pre><code>+----------+                          +----------+
|          |                          |          |
|          |******** BEEP 会话 *******|          |
|          |                          |          |
|  分析器  | ------- IDXP 轮廓 -----&gt; |  管理器  |
| (客户端) |                          | (服务端) |
|          |                          |          |
|          |**************************|          |
|          |                          |          |
+----------+                          +----------+
</code></pre>

<p>在一个BEEP会话中使用多个BEEP信道的方式对IDXP对等体之间传输数据的分类和优先级的管理非常有利。例如，管理器"M1"向"M2"发送报警数据时，可以将不同类型的信息使用单独的信道进行传输。"M1"在这些信道中扮演了客户端的角色，"M2"则对接收到的报警信息根据其不同类型进行相应处理。</p>

<pre><code>+----------+                                            +----------+
|          |                                            |          |
|          |**************** BEEP 会话 *****************|          |
|          |                                            |          |
|          | ----- IDXP 轮廓, 基于网络的报警信息 -----&gt; |          |
|  管理器  |                                            |  管理器  |
|    M1    | ----- IDXP 轮廓, 基于主机的报警信息 -----&gt; |    M2    |
| (客户端) |                                            | (服务端) |
|          | -------- IDXP 轮廓, 其它报警信息 --------&gt; |          |
|          |                                            |          |
|          |********************************************|          |
|          |                                            |          |
+----------+                                            +----------+
</code></pre>

<h4>1.3 断开连接</h4>

<p>在一些情况下(如处理过程中出现错误)，IDXP对等体可以关闭某个IDXP信道。要关闭某条信道，需要在零号信道上发送一条"关闭"的指令，并且指明所关闭的信道。如果想要关闭整个BEEP会话，只需在零号信道上发送一条要求"关闭"零信道的指令即可。</p>

<p>由于应用层隧道和BEEP安全轮廓会经常使用，所以凡是包含IDXP信道的BEEP会话将会一直存活下去。同时，为了避免IDXP信道被反复的建立，系统会一直保持这些IDXP信道的连接，即使当前已经没有数据在上面传输。建议当IDXP对等体在合适的时候，手动关闭并重建BEEP会话。</p>

<h4>1.4 可信模型</h4>

<p>在以上的模型中，BEEP安全轮廓是建立在IDXP对等体之间从而实现的端到端安全，而无需对中间代理建立信任。因此，只有在安全轮廓下经过协商后的IDXP对等体之间是相互信任的，而代理始终被看作是不可信的。</p>

<h3>2 入侵检测消息交换格式</h3>

<h4>2.1 IDMEF数据模型</h4>

<p>IDMEF数据模型的各主要部分关系如下图所示（这里省略了事件指示器和属性）。
<img class="center" src="/images/articles/201004/intrusion_dedection_and_response_system_for_information_sharing.png" title="数据模型" ></p>

<p>IDMEF消息的最高层类是"IDMEF-Message"，其它各类型消息都是该类的子类。目前IDMEF定义了两种消息："Alerts"和"Heartbeats"。其中这两个消息各自携带不同的子类，各子类又描述了更加详细的信息。</p>

<p>需要注意的是，数据模型并没有指明警报信息如何分类和识别。例如，端口扫描这一行为，它可能被分析器识别为一次单点对多目标的攻击，同时被另一分析器识别为多次的单点攻击。所有，只有在分析器确定了报警类型之后，数据模型才能确定如何对报警数据进行格式化。</p>

<h4>2.2 示例</h4>

<p>IDMEF数据模型最终是以XML形式实现，XML跨平台、跨语言以及强扩展性的特点保证了IDS设备之间共享信息时良好的兼容性。</p>

<p>下面用实例说明IDMEF对报警信息封装的格式。这些例子只是为说明用，不具备代表性。</p>

<p><code>xml 基于网络检测到的某次泪滴攻击报警信息
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
   &lt;idmef:IDMEF-Message xmlns:idmef="http://iana.org/idmef" version="1.0"&gt;
     &lt;idmef:Alert messageid="abc123456789"&gt;
       &lt;idmef:Analyzer analyzerid="hq-dmz-analyzer01"&gt;
         &lt;idmef:Node category="dns"&gt;
           &lt;idmef:location&gt;Headquarters DMZ Network&lt;/idmef:location&gt;
           &lt;idmef:name&gt;analyzer01.example.com&lt;/idmef:name&gt;
         &lt;/idmef:Node&gt;
       &lt;/idmef:Analyzer&gt;
       &lt;idmef:CreateTime ntpstamp="0xbc723b45.0xef449129"&gt;
         2000-03-09T10:01:25.93464-05:00
       &lt;/idmef:CreateTime&gt;
       &lt;idmef:Source ident="a1b2c3d4"&gt;
         &lt;idmef:Node ident="a1b2c3d4-001" category="dns"&gt;
           &lt;idmef:name&gt;badguy.example.net&lt;/idmef:name&gt;
           &lt;idmef:Address ident="a1b2c3d4-002" category="ipv4-net-mask"&gt;
             &lt;idmef:address&gt;192.0.2.50&lt;/idmef:address&gt;
             &lt;idmef:netmask&gt;255.255.255.255&lt;/idmef:netmask&gt;
           &lt;/idmef:Address&gt;
         &lt;/idmef:Node&gt;
       &lt;/idmef:Source&gt;
       &lt;idmef:Target ident="d1c2b3a4"&gt;
         &lt;idmef:Node ident="d1c2b3a4-001" category="dns"&gt;
           &lt;idmef:Address category="ipv4-addr-hex"&gt;
             &lt;idmef:address&gt;0xde796f70&lt;/idmef:address&gt;
           &lt;/idmef:Address&gt;
         &lt;/idmef:Node&gt;
       &lt;/idmef:Target&gt;
       &lt;idmef:Classification text="Teardrop detected"&gt;
         &lt;idmef:Reference origin="bugtraqid"&gt;
           &lt;idmef:name&gt;124&lt;/idmef:name&gt;
           &lt;idmef:url&gt;http://www.securityfocus.com/bid/124&lt;/idmef:url&gt;
         &lt;/idmef:Reference&gt;
       &lt;/idmef:Classification&gt;
     &lt;/idmef:Alert&gt;
   &lt;/idmef:IDMEF-Message&gt;
</code></p>

<p><code>xml 基于网络检测到的某个端口扫描行为（注意&lt;portlist&gt;中记录了被扫描的端口列表）
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
   &lt;idmef:IDMEF-Message version="1.0" xmlns:idmef="http://iana.org/idmef"&gt;
     &lt;idmef:Alert messageid="abc123456789"&gt;
       &lt;idmef:Analyzer analyzerid="hq-dmz-analyzer62"&gt;
         &lt;idmef:Node category="dns"&gt;
           &lt;idmef:location&gt;Headquarters Web Server&lt;/idmef:location&gt;
           &lt;idmef:name&gt;analyzer62.example.com&lt;/idmef:name&gt;
         &lt;/idmef:Node&gt;
       &lt;/idmef:Analyzer&gt;
       &lt;idmef:CreateTime ntpstamp="0xbc72b2b4.0x00000000"&gt;
         2000-03-09T15:31:00-08:00
       &lt;/idmef:CreateTime&gt;
       &lt;idmef:Source ident="abc01"&gt;
         &lt;idmef:Node ident="abc01-01"&gt;
           &lt;idmef:Address ident="abc01-02" category="ipv4-addr"&gt;
             &lt;idmef:address&gt;192.0.2.200&lt;/idmef:address&gt;
           &lt;/idmef:Address&gt;
         &lt;/idmef:Node&gt;
       &lt;/idmef:Source&gt;
       &lt;idmef:Target ident="def01"&gt;
         &lt;idmef:Node ident="def01-01" category="dns"&gt;
           &lt;idmef:name&gt;www.example.com&lt;/idmef:name&gt;
           &lt;idmef:Address ident="def01-02" category="ipv4-addr"&gt;
             &lt;idmef:address&gt;192.0.2.50&lt;/idmef:address&gt;
           &lt;/idmef:Address&gt;
         &lt;/idmef:Node&gt;
         &lt;idmef:Service ident="def01-03"&gt;
           &lt;idmef:portlist&gt;5-25,37,42,43,53,69-119,123-514
           &lt;/idmef:portlist&gt;
         &lt;/idmef:Service&gt;
       &lt;/idmef:Target&gt;
       &lt;idmef:Classification text="simple portscan"&gt;
         &lt;idmef:Reference origin="vendor-specific"&gt;
           &lt;idmef:name&gt;portscan&lt;/idmef:name&gt;
           &lt;idmef:url&gt;http://www.vendor.com/portscan&lt;/idmef:url&gt;
         &lt;/idmef:Reference&gt;
       &lt;/idmef:Classification&gt;
     &lt;/idmef:Alert&gt;
   &lt;/idmef:IDMEF-Message&gt;
</code></p>

<h3>3 参考资料</h3>

<pre><code>1. RFC4765 - The Intrusion Detection Message Exchange Format (IDMEF)
2. RFC4767 - The Intrusion Detection Exchange Protocol (IDXP)
</code></pre>
]]></content>
  </entry>
  
</feed>
